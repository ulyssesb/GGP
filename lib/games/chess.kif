;;; -*-Lisp-*-
;*******************************************************************************
;* chess.kif                                                                   *
;* First Draft: Tom Fawcett - 2/23/06                                          *
;* Edits: Nat Love, David Stracuzzi                                            *
;* Last revision 5/10/06 by Nat Love                                            *
;*******************************************************************************

; ACTION (move ?piece ?xsrc ?ysrc ?xdest ?ydest)

(role white)
(role black)

;*******************************************************************************
;* Initial state.                                                              *
;* Letters are columns: row 1 is WHITE side, row 8 is BLACK                    *
;* Numbers are rows:    column a is left, h is right (from white side)         *
;*******************************************************************************

(init (cell a 1 wr))
(init (cell a 2 wp))
(init (cell a 3 b))
(init (cell a 4 b))
(init (cell a 5 b))
(init (cell a 6 b))
(init (cell a 7 bp))
(init (cell a 8 br))

(init (cell b 1 wn))
(init (cell b 2 wp))
(init (cell b 3 b))
(init (cell b 4 b))
(init (cell b 5 b))
(init (cell b 6 b))
(init (cell b 7 bp))
(init (cell b 8 bn))

(init (cell c 1 wb))
(init (cell c 2 wp))
(init (cell c 3 b))
(init (cell c 4 b))
(init (cell c 5 b))
(init (cell c 6 b))
(init (cell c 7 bp))
(init (cell c 8 bb))

(init (cell d 1 wq))
(init (cell d 2 wp))
(init (cell d 3 b))
(init (cell d 4 b))
(init (cell d 5 b))
(init (cell d 6 b))
(init (cell d 7 bp))
(init (cell d 8 bq))

(init (cell e 1 wk))
(init (cell e 2 wp))
(init (cell e 3 b))
(init (cell e 4 b))
(init (cell e 5 b))
(init (cell e 6 b))
(init (cell e 7 bp))
(init (cell e 8 bk))

(init (cell f 1 wb))
(init (cell f 2 wp))
(init (cell f 3 b))
(init (cell f 4 b))
(init (cell f 5 b))
(init (cell f 6 b))
(init (cell f 7 bp))
(init (cell f 8 bb))

(init (cell g 1 wn))
(init (cell g 2 wp))
(init (cell g 3 b))
(init (cell g 4 b))
(init (cell g 5 b))
(init (cell g 6 b))
(init (cell g 7 bp))
(init (cell g 8 bn))

(init (cell h 1 wr))
(init (cell h 2 wp))
(init (cell h 3 b))
(init (cell h 4 b))
(init (cell h 5 b))
(init (cell h 6 b))
(init (cell h 7 bp))
(init (cell h 8 br))

(init (control white))
(init (step s1))

; End initial state

;*******************************************************************************
;* NEXT STATE AXIOMS: REGULAR MOVES                                            *
;*******************************************************************************

; MOVE SOURCE
; Piece ?p moves out of ?u ?v leaving square blank
(<= (next (cell ?u ?v b))
    (does ?player (move ?p ?u ?v ?x ?y)))

; MOVE DESTINATION: NON-QUEENING MOVE
; Piece ?p moves to ?x ?y
(<= (next (cell ?x ?y ?p))
    (does ?player (move ?p ?u ?v ?x ?y))
    (or (distinct ?p wp) (distinct ?y 8))
    (or (distinct ?p bp) (distinct ?y 1)))

; UNDISTURBED CELL: NON-CASTLE MOVE / NON-ENPASSANT
; Piece (or blank) ?p at ?x ?y remains unchanged if:
; 1) This move is not a castle or an en passant capture
; 2) ?x ?y is a different cell from the move source cell
; 3) ?x ?y is a different cell from the move destination cell
(<= (next (cell ?x ?y ?p))
    (does ?player (move ?piece ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x ?y ?p))
    (not (is_castle_move ?piece ?x1 ?y1 ?x2 ?y2))
    (not (pawn_capture_en_passant ?player ?x1 ?y1 ?x2 ?y2))
    (different_cells ?x ?y ?x1 ?y1)
    (different_cells ?x ?y ?x2 ?y2))

; CONTROL TRANSFER
(<= (next (control white))
    (true (control black)))
(<= (next (control black))
    (true (control white)))

; MOVE COUNT
(<= (next (step ?y))
    (true (step ?x))
    (succ ?x ?y))

;*******************************************************************************
;* NEXT STATE AXIOMS: SPECIAL MOVES                                            *
;*******************************************************************************

; MOVE DESTINATION: QUEENING MOVE
(<= (next (cell ?x 8 wq))
    (does ?player (move wp ?u ?v ?x 8)))
(<= (next (cell ?x 1 bq))
    (does ?player (move bp ?u ?v ?x 1)))

; UNDISTURBED CELL: CASTLE MOVE
; Piece or blank ?p at ?x ?y remains unchanged if:
; 1) This is a castle move
; 2) ?x ?y is not one of the 4 or 5 castle cells
(<= (next (cell ?x ?y ?p))
    (does ?player (move ?q ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x ?y ?p))
    (is_castle_move ?q ?x1 ?y1 ?x2 ?y2)
    (not (is_castle_cell ?x2 ?y2 ?x ?y)))

; UNDISTURBED CELL: EN PASSANT
; Piece or blank ?p at ?x ?y remains unchanged if:
; 1) This is an en passant capture
; 2) ?x ?y is not one of the en passant cells

(<= (next (cell ?x ?y ?p))
    (does ?player (move ?piece ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x ?y ?p))
    (pawn_capture_en_passant ?player ?x1 ?y1 ?x2 ?y2)
    (different_cells ?x ?y ?x1 ?y1)
    (different_cells ?x ?y ?x2 ?y2)
    (different_cells ?x ?y ?x2 ?y1))

; PAWN CAPTURED EN PASSANT
(<= (next (cell ?x2 ?y1 b))
    (does ?player (move ?piece ?x1 ?y1 ?x2 ?y2))
    (pawn_capture_en_passant ?player ?x1 ?y1 ?x2 ?y2))

; CASTLING: KING SIDE WHITE
(<= (next (cell e 1 b))
    (does white (move wk e 1 g 1)))
(<= (next (cell f 1 wr))
    (does white (move wk e 1 g 1)))
(<= (next (cell g 1 wk))
    (does white (move wk e 1 g 1)))
(<= (next (cell h 1 b))
    (does white (move wk e 1 g 1)))

; CASTLING: QUEEN SIDE WHITE
(<= (next (cell a 1 b))
    (does white (move wk e 1 c 1)))
(<= (next (cell b 1 b))
    (does white (move wk e 1 c 1)))
(<= (next (cell c 1 wk))
    (does white (move wk e 1 c 1)))
(<= (next (cell d 1 wr))
    (does white (move wk e 1 c 1)))
(<= (next (cell e 1 b))
    (does white (move wk e 1 c 1)))

; CASTLING: KING SIDE BLACK
(<= (next (cell e 8 b))
    (does black (move bk e 8 g 8)))
(<= (next (cell f 8 br))
    (does black (move bk e 8 g 8)))
(<= (next (cell g 8 bk))
    (does black (move bk e 8 g 8)))
(<= (next (cell h 8 b))
    (does black (move bk e 8 g 8)))

; CASTLING: QUEEN SIDE BLACK
(<= (next (cell a 8 b))
    (does black (move bk e 8 c 8)))
(<= (next (cell b 8 b))
    (does black (move bk e 8 c 8)))
(<= (next (cell c 8 bk))
    (does black (move bk e 8 c 8)))
(<= (next (cell d 8 br))
    (does black (move bk e 8 c 8)))
(<= (next (cell e 8 b))
    (does black (move bk e 8 c 8)))

;*******************************************************************************
;* NEXT STATE AXIOMS: SPECIAL STATE PREDICATES                                 *
;*******************************************************************************

; PIECE_HAS_MOVED
; True iff rook or king has moved from original position.
; Used to test legality of castle move.
(<= (next (piece_has_moved wk e 1))
    (does white (move wk e 1 ?x ?y)))
(<= (next (piece_has_moved wr a 1))
    (does white (move wr a 1 ?x ?y)))
(<= (next (piece_has_moved wr h 1))
    (does white (move wr h 1 ?x ?y)))
(<= (next (piece_has_moved bk e 8))
    (does black (move bk e 8 ?x ?y)))
(<= (next (piece_has_moved br a 8))
    (does black (move br a 8 ?x ?y)))
(<= (next (piece_has_moved br h 8))
    (does black (move br h 8 ?x ?y)))

(<= (next (piece_has_moved ?p ?x ?y))
    (true (piece_has_moved ?p ?x ?y)))

; PAWN MOVED TWO
; True iff this pawn just advanced 2 spots.
; Used to test legality of en passant pawn capture.
; No frame axiom for this since it only lasts one state.
(<= (next (pawn_moved_two wp ?x))
    (does white (move wp ?x 2 ?x 4)))

(<= (next (pawn_moved_two bp ?x))
    (does black (move bp ?x 7 ?x 5)))

; KING IN CHECK
; True iff ?player's king is in check from opponent's ?piece at ?x ?y
(<= (next (check ?player pawn ?x ?y))
    (does ?opponent (move ?piece ?u ?v ?x ?y))
    (opponent ?player ?opponent)
    (piece_owner_type ?piece ?opponent pawn)
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (pawn_capture ?x ?y ?kx ?ky ?opponent))

(<= (next (check ?player knight ?x ?y))
    (does ?opponent (move ?piece ?u ?v ?x ?y))
    (opponent ?player ?opponent)
    (piece_owner_type ?piece ?opponent knight)
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (knight_move ?piece ?x ?y ?kx ?ky ?opponent))

(<= (next (check ?player rook ?x ?y))
    (does ?opponent (move ?piece ?u ?v ?x ?y))
    (opponent ?player ?opponent)
    (piece_owner_type ?piece ?opponent rook)
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (rook_move ?x ?y ?kx ?ky))

(<= (next (check ?player bishop ?x ?y))
    (does ?opponent (move ?piece ?u ?v ?x ?y))
    (opponent ?player ?opponent)
    (piece_owner_type ?piece ?opponent bishop)
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (bishop_move ?x ?y ?kx ?ky))

(<= (next (check ?player queen ?x ?y))
    (does ?opponent (move ?piece ?u ?v ?x ?y))
    (opponent ?player ?opponent)
    (piece_owner_type ?piece ?opponent queen)
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (queen_move ?x ?y ?kx ?ky))

; KING IN CHECK (DISCOVERED)
; You can be placed in check by an opponent moving a piece which exposes a 
; threat from another piece. (Threating piece must be bishop, rook, or queen).
(<= (next (check ?player rook ?x ?y))
    (does ?opponent (move ?piece ?u ?v ?x1 ?y1))
    (opponent ?player ?opponent)
    (piece_owner_type ?rook ?opponent rook)
    (piece_owner_type ?king ?player king)
    (true (cell ?x ?y ?rook))
    (true (cell ?kx ?ky ?king))
    (rook_threatens ?opponent ?x ?y ?kx ?ky ?u ?v))

(<= (next (check ?player bishop ?x ?y))
    (does ?opponent (move ?piece ?u ?v ?x1 ?y1))
    (opponent ?player ?opponent)
    (piece_owner_type ?bishop ?opponent bishop)
    (piece_owner_type ?king ?player king)
    (true (cell ?x ?y ?bishop))
    (true (cell ?kx ?ky ?king))
    (bishop_threatens ?opponent ?x ?y ?kx ?ky ?u ?v))

(<= (next (check ?player queen ?x ?y))
    (does ?opponent (move ?piece ?u ?v ?x1 ?y1))
    (opponent ?player ?opponent)
    (piece_owner_type ?queen ?opponent queen)
    (piece_owner_type ?king ?player king)
    (true (cell ?x ?y ?queen))
    (true (cell ?kx ?ky ?king))
    (queen_threatens ?opponent ?x ?y ?kx ?ky ?u ?v))
    
; KING IN CHECK (QUEENED PAWN)
; A white pawn moving to rank 8 or black pawn moving to rank 1 may create
; a threat

(<= (next (check white queen ?x 1))
    (does black (move bp ?u ?v ?x 1))
    (true (cell ?kx ?ky wk))
    (queen_move ?x 1 ?kx ?ky))

(<= (next (check black queen ?x 8))
    (does white (move wp ?u ?v ?x 8))
    (true (cell ?kx ?ky bk))
    (queen_move ?x 8 ?kx ?ky))
    
; End next state axioms

;*******************************************************************************
;* LEGAL MOVES and their auxilliary axioms                                     *
;*******************************************************************************

; Legal Move when you are:
; 1) NOT in check
; 2) NOT moving your King
; 3) NOT capturing
(<= (legal ?player (move ?piece ?u ?v ?x ?y))
    (true (control ?player))
    (true (cell ?x ?y b))
    (not (in_check ?player))
    (piece_owner_type ?piece ?player ?ptype)
    (distinct ?ptype king)
    (legal2 ?player (move ?piece ?u ?v ?x ?y))
    ;;  Make sure ?player isn't left in check
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (not (threatened ?player ?kx ?ky ?u ?v))	; (u,v) is location moved from -- ignore it
    )

; Legal Move when you are:
; 1) NOT in check
; 2) NOT moving your King
; 3) CAPTURING
(<= (legal ?player (move ?piece ?u ?v ?x ?y))
    (true (control ?player))
    (occupied_by_opponent ?x ?y ?player)
    (not (in_check ?player))
    (piece_owner_type ?piece ?player ?ptype)
    (distinct ?ptype king)
    (legal2 ?player (move ?piece ?u ?v ?x ?y))
    ;;  Make sure ?player isn't left in check
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (not (threatened_with_capture ?player ?x ?y ?kx ?ky ?u ?v))	; (u,v) is location moved from -- ignore it
    )

; Legal Moves when you are:
; 1) Moving your King
; 2) NOT castling
; Does not matter whether you are currently in check, since you're moving.
(<= (legal ?player (move ?king ?u ?v ?x ?y))
    (true (control ?player))
    (true (cell ?u ?v ?king))
    (piece_owner_type ?king ?player king)
    (kingmove ?u ?v ?x ?y)
    (or (occupied_by_opponent ?x ?y ?player)
    	(true (cell ?x ?y b)))
    ;;  Make sure ?player isn't moving into check
    (not (threatened ?player ?x ?y ?u ?v)))	; (u,v) is location moved from -- ignore it

; Legal Moves when you are:
; 1) In check
; 2) Capturing threatening piece.
(<= (legal ?player (move ?piece ?u ?v ?x ?y))
    (true (control ?player))
    (true (check ?player ?type ?x ?y))
    (occupied_by_opponent ?x ?y ?player)
    (piece_owner_type ?piece ?player ?ptype)
    (distinct ?ptype king)
    (legal2 ?player (move ?piece ?u ?v ?x ?y))
    ;;  Make sure ?player isn't left in check
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (not (threatened_with_capture ?player ?x ?y ?kx ?ky ?u ?v))	; (u,v) is location moved from -- ignore it
    )

; Legal Moves when you are:
; 1) In check
; 2) Blocking threatening piece
; Only queens, rooks, and bishops can be blocked. We treat block like capture

; Block rook threat (rook or queen)
(<= (legal ?player (move ?piece ?u ?v ?x ?y))
    (true (control ?player))
    (or (true (check ?player rook ?tx ?ty))
        (true (check ?player queen ?tx ?ty)))
    (or (occupied_by_opponent ?x ?y ?player)
    	(true (cell ?x ?y b)))
    (piece_owner_type ?piece ?player ?ptype)
    (distinct ?ptype king)
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (blocks_rook_threat ?x ?y ?tx ?ty ?kx ?ky)
    ;;  Make sure ?player isn't left in check
    (not (threatened_with_capture ?player ?tx ?ty ?kx ?ky ?u ?v))	; (u,v) is location moved from -- ignore it
    )

; Block bishop threat (bishop or queen)
(<= (legal ?player (move ?piece ?u ?v ?x ?y))
    (true (control ?player))
    (or (true (check ?player bishop ?tx ?ty))
        (true (check ?player queen ?tx ?ty)))
    (or (occupied_by_opponent ?x ?y ?player)
    	(true (cell ?x ?y b)))    
    (piece_owner_type ?piece ?player ?ptype)
    (distinct ?ptype king)
    (piece_owner_type ?king ?player king)
    (true (cell ?kx ?ky ?king))
    (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (blocks_bishop_threat ?x ?y ?tx ?ty ?kx ?ky)
    ;;  Make sure ?player isn't left in check
    (not (threatened_with_capture ?player ?tx ?ty ?kx ?ky ?u ?v))	; (u,v) is location moved from -- ignore it
    )

(<= (blocks_rook_threat ?x ?y ?tx ?y ?kx ?y)
    (rook_move ?tx ?y ?x ?y)
    (rook_move ?x ?y ?kx ?y))

(<= (blocks_rook_threat ?x ?y ?x ?ty ?x ?ky)
    (rook_move ?x ?ty ?x ?y)
    (rook_move ?x ?y ?x ?ky))

(<= (blocks_bishop_threat ?x ?y ?tx ?ty ?kx ?ky)
    (clear_diagonal_ne ?tx ?ty ?x ?y)
    (clear_diagonal_ne ?x ?y ?kx ?ky))

(<= (blocks_bishop_threat ?x ?y ?tx ?ty ?kx ?ky)
    (clear_diagonal_ne ?kx ?ky ?x ?y)
    (clear_diagonal_ne ?x ?y ?tx ?ty))

(<= (blocks_bishop_threat ?x ?y ?tx ?ty ?kx ?ky)
    (clear_diagonal_se ?tx ?ty ?x ?y)
    (clear_diagonal_se ?x ?y ?kx ?ky))

(<= (blocks_bishop_threat ?x ?y ?tx ?ty ?kx ?ky)
    (clear_diagonal_se ?kx ?ky ?x ?y)
    (clear_diagonal_se ?x ?y ?tx ?ty))

; CASTLING 
; To castle, move the king. The castle move is otherwise illegal.
; You cannot castle if you are in check. 
; You cannot castle through a threat.

; king side: white
(<= (legal white (move wk e 1 g 1))
	(true (control white))
	(true (cell e 1 wk))
    (true (cell f 1 b))
    (true (cell g 1 b))
    (true (cell h 1 wr))
    (not (true (piece_has_moved wk e 1)))
    (not (true (piece_has_moved wr h 1)))
    (not (in_check white))
    (not (threatened white f 1 e 1))
    (not (threatened white g 1 e 1)))

;  queen side: white
(<= (legal white (move wk e 1 c 1))
    (true (control white))
    (true (cell a 1 wr))
    (true (cell b 1 b))
    (true (cell c 1 b))
    (true (cell d 1 b))
    (true (cell e 1 wk))
    (not (true (piece_has_moved wr a 1)))
    (not (true (piece_has_moved wk e 1)))
    (not (in_check white))
    (not (threatened white d 1 e 1))
    (not (threatened white c 1 e 1)))

; king side: black
(<= (legal black (move bk e 8 g 8))
    (true (control black))
    (true (cell e 8 bk))
    (true (cell f 8 b))
    (true (cell g 8 b))
    (true (cell h 8 br))
    (not (true (piece_has_moved bk e 8)))
    (not (true (piece_has_moved br h 8)))
    (not (in_check black))
    (not (threatened black f 8 e 8))
    (not (threatened black g 8 e 8)))

; queen side: black
(<= (legal black (move bk e 8 c 8))
    (true (control black))
    (true (cell a 8 br))
    (true (cell b 8 b))
    (true (cell c 8 b))
    (true (cell d 8 b))
    (true (cell e 8 bk))
    (not (true (piece_has_moved br a 8)))
    (not (true (piece_has_moved bk e 8)))
    (not (in_check black))
    (not (threatened black d 8 e 8))
    (not (threatened black c 8 e 8)))

; NO-OPs for player not moving
(<= (legal white noop)
    (true (control black)))
(<= (legal black noop)
    (true (control white)))

; End legal move axioms

;*******************************************************************************
;* LEGAL PIECE MOVE AND THREAT AXIOMS: KING                                    *
;*******************************************************************************

(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (piece_owner_type ?piece ?player king)
    (true (cell ?u ?v ?piece))
    (kingmove ?u ?v ?x ?y))

;;  King move is horizontal, vertical or diagonal
(<= (kingmove ?u ?v ?u ?y)
    (adjacent ?v ?y)
    (coordinate ?u))

(<= (kingmove ?u ?v ?x ?v)
    (adjacent ?u ?x)
    (coordinate ?v))

(<= (kingmove ?u ?v ?x ?y)
    (adjacent ?u ?x)
    (adjacent ?v ?y))

;;;  KING_THREATENS -- Can a king owned by ?attacker capture a piece at (x,y)?
(<= (king_threatens ?attacker ?x ?y)
    (piece_owner_type ?piece ?attacker king)
    (true (cell ?u ?v ?piece))
    (kingmove ?u ?v ?x ?y))

;*******************************************************************************
;* LEGAL PIECE MOVE AND THREAT AXIOMS: QUEEN                                   *
;*******************************************************************************

(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (piece_owner_type ?piece ?player queen)
    (true (cell ?u ?v ?piece))
    (queen_move ?u ?v ?x ?y))

(<= (queen_move ?u ?v ?x ?y)
    (bishop_move ?u ?v ?x ?y))

(<= (queen_move ?u ?v ?x ?y)
    (rook_move ?u ?v ?x ?y))

; QUEEN THREAT -- Can a queen owned by ?attacker capture a piece at (x,y)
(<= (queen_threatens ?attacker ?u ?v ?x ?y ?ignorex ?ignorey)
    (piece_owner_type ?piece ?attacker queen)
    (true (cell ?u ?v ?piece))
    (queen_move_ig ?u ?v ?x ?y ?ignorex ?ignorey))

(<= (queen_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (bishop_move_ig ?u ?v ?x ?y ?ignorex ?ignorey))

(<= (queen_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (rook_move_ig ?u ?v ?x ?y ?ignorex ?ignorey))

;*******************************************************************************
;* LEGAL PIECE MOVE AND THREAT AXIOMS: ROOK                                    *
;*******************************************************************************

(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (true (cell ?u ?v ?piece))
    (piece_owner_type ?piece ?player rook)
    (rook_move ?u ?v ?x ?y))

(<= (rook_move ?u ?v ?u ?y)
    (clear_column ?u ?v ?y))

(<= (rook_move ?u ?v ?u ?y)
    (clear_column ?u ?y ?v))

(<= (rook_move ?u ?v ?x ?v)
    (clear_row ?u ?x ?v))

(<= (rook_move ?u ?v ?x ?v)
    (clear_row ?x ?u ?v))

; ROOK THREAT
; Just like rook_move except it allows two more arguments indicating a
; square that should be ignored.
(<= (rook_threatens ?attacker ?u ?v ?x ?y ?ignorex ?ignorey)
    (piece_owner_type ?rook ?attacker rook)
    (true (cell ?u ?v ?rook))
    (rook_move_ig ?u ?v ?x ?y ?ignorex ?ignorey))

(<= (rook_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (clear_row_ig ?u ?v ?x ?y ?ignorex ?ignorey))

(<= (rook_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (clear_row_ig ?x ?y ?u ?v ?ignorex ?ignorey))

(<= (rook_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (clear_col_ig ?u ?v ?x ?y ?ignorex ?ignorey))

(<= (rook_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (clear_col_ig ?x ?y ?u ?v ?ignorex ?ignorey))

; CLEAR_ROW_IG
; base case: ?u and ?x are column neighbors
(<= (clear_row_ig ?u ?y ?x ?y ?ignorex ?ignorey)
    (next_file ?u ?x)
    (coordinate ?y)
    (coordinate ?ignorex)
    (coordinate ?ignorey))

; recursive case: the next square should be ignored
(<= (clear_row_ig ?u ?ignorey ?x ?ignorey ?ignorex ?ignorey)
    (next_file ?u ?ignorex)
    (clear_row_ig ?ignorex ?ignorey ?x ?ignorey ?ignorex ?ignorey))

; recursive case: the next square is blank, rest of row is clear.
(<= (clear_row_ig ?u ?y ?x ?y ?ignorex ?ignorey)
    (next_file ?u ?u2)
    (true (cell ?u2 ?y b))
    (clear_row_ig ?u2 ?y ?x ?y ?ignorex ?ignorey))

; CLEAR_COL_IG
; base case: ?u and ?x are adjacent rows
(<= (clear_col_ig ?u ?v ?u ?y ?ignorex ?ignorey)
    (next_rank ?v ?y)
    (coordinate ?u)
    (coordinate ?ignorex)
    (coordinate ?ignorey))

; recursive case: the adjacent square should be ignored
(<= (clear_col_ig ?ignorex ?v ?ignorex ?y ?ignorex ?ignorey)
    (next_rank ?v ?ignorey)
    (clear_col_ig ?ignorex ?ignorey ?ignorex ?y ?ignorex ?ignorey))

; recursive case: the adjacent square is blank, rest of column is clear.
(<= (clear_col_ig ?u ?v ?u ?y ?ignorex ?ignorey)
    (next_rank ?v ?v2)
    (true (cell ?u ?v2 b))
    (clear_col_ig ?u ?v2 ?u ?y ?ignorex ?ignorey))

;*******************************************************************************
;* LEGAL PIECE MOVE AND THREAT AXIOMS: BISHOP                                  *
;*******************************************************************************
(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (role ?player)
    (piece_owner_type ?piece ?player bishop)
    (true (cell ?u ?v ?piece))
    (bishop_move ?u ?v ?x ?y))

(<= (bishop_move ?u ?v ?x ?y)
    (clear_diagonal_ne ?u ?v ?x ?y))

(<= (bishop_move ?u ?v ?x ?y)
    (clear_diagonal_ne ?x ?y ?u ?v))

(<= (bishop_move ?u ?v ?x ?y)
    (clear_diagonal_se ?u ?v ?x ?y))

(<= (bishop_move ?u ?v ?x ?y)
    (clear_diagonal_se ?x ?y ?u ?v))

; CLEAR_DIAGONAL_NE: base case
(<= (clear_diagonal_ne ?u ?v ?x ?y)
    (next_file ?u ?x)
    (next_rank ?v ?y))

; CLEAR_DIAGONAL_NE: recursive case
(<= (clear_diagonal_ne ?u ?v ?x ?y)
    (next_file ?u ?u2)
    (next_rank ?v ?v2)
    (true (cell ?u2 ?v2 b))
    (clear_diagonal_ne ?u2 ?v2 ?x ?y))

; CLEAR_DIAGONAL_SE: base case
(<= (clear_diagonal_se ?u ?v ?x ?y)
    (next_file ?u ?x)
    (next_rank ?y ?v))

; CLEAR_DIAGONAL_SE: recursive case
(<= (clear_diagonal_se ?u ?v ?x ?y)
    (next_file ?u ?u2)
    (next_rank ?v2 ?v)
    (true (cell ?u2 ?v2 b))
    (clear_diagonal_se ?u2 ?v2 ?x ?y))

; BISHOP THREAT
; Just like bishop_move except it allows two more arguments indicating a
; square that should be ignored.
(<= (bishop_threatens ?attacker ?u ?v ?x ?y ?ignorex ?ignorey)
    (piece_owner_type ?bishop ?attacker bishop)
    (true (cell ?u ?v ?bishop))
    (bishop_move_ig ?u ?v ?x ?y ?ignorex ?ignorey))

(<= (bishop_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (clear_diagonal_ne_ig ?u ?v ?x ?y ?ignorex ?ignorey))

(<= (bishop_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (clear_diagonal_ne_ig ?x ?y ?u ?v ?ignorex ?ignorey))

(<= (bishop_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (clear_diagonal_se_ig ?u ?v ?x ?y ?ignorex ?ignorey))

(<= (bishop_move_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (clear_diagonal_se_ig ?x ?y ?u ?v ?ignorex ?ignorey))

; CLEAR_DIAGONAL_NE_IG: base case
(<= (clear_diagonal_ne_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (next_file ?u ?x)
    (next_rank ?v ?y)
    (coordinate ?ignorex)
    (coordinate ?ignorey))

; CLEAR_DIAGONAL_NE_IG: recursive case -- (x,y) ignored
(<= (clear_diagonal_ne_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (next_file ?u ?ignorex)
    (next_rank ?v ?ignorey)
    (clear_diagonal_ne_ig ?ignorex ?ignorey ?x ?y ?ignorex ?ignorey))

; CLEAR_DIAGONAL_NE_IG: general recursive case
(<= (clear_diagonal_ne_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (next_file ?u ?u2)
    (next_rank ?v ?v2)
    (true (cell ?u2 ?v2 b))
    (clear_diagonal_ne_ig ?u2 ?v2 ?x ?y ?ignorex ?ignorey))

; CLEAR_DIAGONAL_SE_IG: base case
(<= (clear_diagonal_se_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (next_file ?u ?x)
    (next_rank ?y ?v)
    (coordinate ?ignorex)
    (coordinate ?ignorey))

; CLEAR_DIAGONAL_SE_IG: recursive case -- (x,y) ignored
(<= (clear_diagonal_se_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (next_file ?u ?ignorex)
    (next_rank ?ignorey ?v)
    (clear_diagonal_se_ig ?ignorex ?ignorey ?x ?y ?ignorex ?ignorey))

; CLEAR_DIAGONAL_SE_IG: general recursive
(<= (clear_diagonal_se_ig ?u ?v ?x ?y ?ignorex ?ignorey)
    (next_file ?u ?u2)
    (next_rank ?v2 ?v)
    (true (cell ?u2 ?v2 b))
    (clear_diagonal_se_ig ?u2 ?v2 ?x ?y ?ignorex ?ignorey))

;*******************************************************************************
;* LEGAL PIECE MOVE AND THREAT AXIOMS: KNIGHT                                  *
;*******************************************************************************

(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (piece_owner_type ?piece ?player knight)
    (true (cell ?u ?v ?piece))
    (knight_move ?piece ?u ?v ?x ?y ?player)
    )

; Up two + over one in any direction
(<= (knight_move ?piece ?u ?v ?x ?y ?owner)
    (piece_owner_type ?piece ?owner knight)
    (adjacent_two ?v ?y)
    (adjacent ?u ?x))

; Up one + over two in any direction
(<= (knight_move ?piece ?u ?v ?x ?y ?owner)
    (piece_owner_type ?piece ?owner knight)
    (adjacent_two ?u ?x)
    (adjacent ?v ?y))

; KNIGHT_THREATENS -- Can a knight owned by ?attacker capture a piece at (x,y)
(<= (knight_threatens ?attacker ?x ?y)
    (true (cell ?u ?v ?piece))
    (piece_owner_type ?piece ?attacker knight)
    (knight_move ?piece ?u ?v ?x ?y ?attacker))

;*******************************************************************************
;* LEGAL PIECE MOVE AND THREAT AXIOMS: PAWN                                    *
;*******************************************************************************

; ADVANCE
(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (true (cell ?x ?y b))
    (true (cell ?u ?v ?piece))
    (piece_owner_type ?piece ?player pawn)
    (pawn_advance ?u ?v ?x ?y ?player))

; white pawns advance up the rows
(<= (pawn_advance ?u ?v ?u ?y white)
    (next_rank ?v ?y)
    (coordinate ?u))

(<= (pawn_advance ?u 2 ?u 4 white)
    (true (cell ?u 3 b)))

; blacks pawns advance down the rows
(<= (pawn_advance ?u ?v ?u ?y black)
    (next_rank ?y ?v)
    (coordinate ?u))

(<= (pawn_advance ?u 7 ?u 5 black)
    (true (cell ?u 6 b)))

; REGULAR CAPTURE
(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (true (cell ?u ?v ?piece))
    (piece_owner_type ?piece ?player pawn)
    (opponent ?player ?opponent)
    (piece_owner_type ?captured ?opponent ?type)
    (true (cell ?x ?y ?captured))
    (pawn_capture ?u ?v ?x ?y ?player))

; Can a pawn at (u,v) owned by ?player capture a piece at (x,y)?
(<= (pawn_capture ?u ?v ?x ?y white)
    (next_rank ?v ?y)
    (or (next_file ?u ?x) (next_file ?x ?u)))

(<= (pawn_capture ?u ?v ?x ?y black)
    (next_rank ?y ?v)
    (or (next_file ?u ?x) (next_file ?x ?u)))

; EN PASSANT CAPTURE
(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (true (cell ?u ?v ?piece))
    (piece_owner_type ?piece ?player pawn)
    (pawn_capture_en_passant ?player ?u ?v ?x ?y))

; IS EN PASSSANT CAPTURE
; true iff moving the piece from the source to the destination
; cell constitutes an en passant capture
(<= (pawn_capture_en_passant white ?x1 5 ?x2 6)
    (true (cell ?x1 5 wp))
    (true (pawn_moved_two bp ?x2))
    (pawn_capture ?x1 5 ?x2 6 white))

(<= (pawn_capture_en_passant black ?x1 4 ?x2 3)
    (true (cell ?x1 4 bp))
    (true (pawn_moved_two wp ?x2))
    (pawn_capture ?x1 4 ?x2 3 black))

; End legal piece move axioms

;*******************************************************************************
;* THREAT AXIOMS                                                               *
;* True if a piece owned by ?owner at (x,y) could be captured.                 *
;* (ignorex,ignorey) is a square to be ignored, usually because it is          *
;* occupied by a piece that is going to be moved.                              *
;*******************************************************************************

; This condition tests whether ?opp owns a piece that could take (x,y), but
; not whether there is a piece at (x,y) to be captured.
(<= (threatened ?owner ?x ?y ?ignorex ?ignorey)
    (opponent ?owner ?opponent)
    (piece_owner_type ?opiece ?opponent pawn)
    (true (cell ?u ?v ?opiece))
    (pawn_capture ?u ?v ?x ?y ?opponent)
    (coordinate ?ignorex)
    (coordinate ?ignorey))

(<= (threatened ?owner ?x ?y ?ignorex ?ignorey)
    (opponent ?owner ?opponent)
    (or 
     (bishop_threatens ?opponent ?u ?v ?x ?y ?ignorex ?ignorey)
     (rook_threatens   ?opponent ?u ?v ?x ?y ?ignorex ?ignorey)
     (queen_threatens  ?opponent ?u ?v ?x ?y ?ignorex ?ignorey)
     (knight_threatens ?opponent ?x ?y)
     (king_threatens   ?opponent ?x ?y)
     )
    (coordinate ?ignorex)
    (coordinate ?ignorey))

; threatened even though ?owner capturing at ?cx ?cy
; threatened-with-capture is like threatened, but it won't consider threats 
; originating from ?x ?y, because that piece is being captured.
(<= (threatened_with_capture ?owner ?cx ?cy ?x ?y ?ignorex ?ignorey)
    (opponent ?owner ?opponent)
    (piece_owner_type ?opiece ?opponent pawn)
    (true (cell ?u ?v ?opiece))
    (different_cells ?cx ?cy ?u ?v)
    (pawn_capture ?u ?v ?x ?y ?opponent)
    (coordinate ?ignorex)
    (coordinate ?ignorey))

(<= (threatened_with_capture ?owner ?cx ?cy ?x ?y ?ignorex ?ignorey)
    (opponent ?owner ?opponent)
    (or 
     (bishop_threatens ?opponent ?u ?v ?x ?y ?ignorex ?ignorey)
     (rook_threatens   ?opponent ?u ?v ?x ?y ?ignorex ?ignorey)
     (queen_threatens  ?opponent ?u ?v ?x ?y ?ignorex ?ignorey))
    (different_cells ?cx ?cy ?u ?v))

(<= (threatened_with_capture ?owner ?cx ?cy ?x ?y ?ignorex ?ignorey)
    (opponent ?owner ?opponent)
    (piece_owner_type ?piece ?opponent knight)
    (true (cell ?u ?v ?piece))
    (different_cells ?cx ?cy ?u ?v)
    (knight_move ?piece ?u ?v ?x ?y ?opponent)
    (coordinate ?ignorex)
    (coordinate ?ignorey))

(<= (threatened_with_capture ?owner ?cx ?cy ?x ?y ?ignorex ?ignorey)
    (opponent ?owner ?opponent)
    (king_threatens ?opponent ?x ?y)
    (coordinate ?ignorex)
    (coordinate ?ignorey)
    (coordinate ?cx)
    (coordinate ?cy))


; End threat axioms

;*******************************************************************************
; AUXILIARY PREDICATES                                                         *
;*******************************************************************************

;;;  DIFFERENT CELLS
;;;  True iff ?x1 ?y1 is a different cell from ?x2 ?y2
(<= (adjacent ?x1 ?x2)
    (next_file ?x1 ?x2))

(<= (adjacent ?x1 ?x2)
    (next_file ?x2 ?x1))

(<= (adjacent ?y1 ?y2)
    (next_rank ?y1 ?y2))

(<= (adjacent ?y1 ?y2)
    (next_rank ?y2 ?y1))

(<= (adjacent_two ?a ?b)
    (adjacent ?a ?mid)
    (adjacent ?mid ?b)
    (distinct ?a ?b))

(<= (clear_column ?u ?v ?y)
    (next_rank ?v ?y)
    (coordinate ?u))

(<= (clear_column ?u ?v ?y)
    (next_rank ?v ?w)
    (true (cell ?u ?w b))
    (clear_column ?u ?w ?y))

(<= (clear_row ?u ?x ?v)
    (next_file ?u ?x)
    (coordinate ?v))

(<= (clear_row ?u ?x ?v)
    (next_file ?u ?w)
    (true (cell ?w ?v b))
    (clear_row ?w ?x ?v))

(<= (different_cells ?x1 ?y1 ?x2 ?y2)
    (distinct ?x1 ?x2)
    (coordinate ?x1)
    (coordinate ?x2)
    (coordinate ?y1)
    (coordinate ?y2))

(<= (different_cells ?x1 ?y1 ?x2 ?y2)
    (distinct ?y1 ?y2)
    (coordinate ?x1)
    (coordinate ?x2)
    (coordinate ?y1)
    (coordinate ?y2))

(<= (has_legal_move ?player)
    (legal ?player (move ?piece ?u ?v ?x ?y)))

(<= (in_check ?player)
    (true (check ?player ?ptype ?x ?y)))

(<= (occupied_by_opponent ?x ?y ?player)
    (true (cell ?x ?y ?piece))
    (opponent ?player ?opponent)
    (piece_owner_type ?piece ?opponent ?type))

(<= (occupied_by_player ?x ?y ?player)
    (true (cell ?x ?y ?piece))
    (piece_owner_type ?piece ?player ?type))

;*******************************************************************************
;* GAME TERMINATION CONDITIONS                                                 *
;*******************************************************************************
(<= (checkmate ?player)
    (true (control ?player))
    (true (check ?player ?ptype ?x ?y))
    (stuck ?player))

(<= stalemate
    (true (control ?player))
    (not (in_check ?player))
    (stuck ?player))

(<= (stuck ?player)
    (role ?player)
    (not (has_legal_move ?player)))

; End auxiliary axioms 

;*******************************************************************************
;* GOALS AND TERMINAL STATES                                                   *
;* Player gets 100 for checkmating the opponent,                               *
;* 50 for stalemating and 0 for being checkmated.                              *
;*******************************************************************************
(<= (goal white 100)
    (checkmate black))

(<= (goal white 50)
      stalemate)

(<= (goal white 0)
    (checkmate white))

(<= (goal black 100)
    (checkmate white))

(<= (goal black 50)
      stalemate)

(<= (goal black 0)
    (checkmate black))
   
(<= (goal ?player 50)
	(role ?player)
	(true (step 201)))

;; MOVE LIMIT
(<= terminal
    (true (step 201)))

(<= terminal
    (true (control ?player))
    (stuck ?player))

; End goals and terminals
;*******************************************************************************
;* GROUND FACTS                                                                *
;*******************************************************************************

; PLAYER OPPONENTS
(opponent white black)
(opponent black white)

; PIECE OWNERSHIP AND TYPE 
(piece_owner_type wk white king)
(piece_owner_type wq white queen)
(piece_owner_type wr white rook)
(piece_owner_type wb white bishop)
(piece_owner_type wn white knight)
(piece_owner_type wp white pawn)

(piece_owner_type bk black king)
(piece_owner_type bq black queen)
(piece_owner_type br black rook)
(piece_owner_type bb black bishop)
(piece_owner_type bn black knight)
(piece_owner_type bp black pawn)

; IS CASTLE CELL
; True iff the cell designated by the second pair of arguments is one of the 
; castle cells in the same corner of the board as the first pair of arguments.
(is_castle_cell g 1 e 1)
(is_castle_cell g 1 f 1)
(is_castle_cell g 1 g 1)
(is_castle_cell g 1 h 1)

(is_castle_cell c 1 a 1)
(is_castle_cell c 1 b 1)
(is_castle_cell c 1 c 1)
(is_castle_cell c 1 d 1)
(is_castle_cell c 1 e 1)

(is_castle_cell g 8 e 8)
(is_castle_cell g 8 f 8)
(is_castle_cell g 8 g 8)
(is_castle_cell g 8 h 8)

(is_castle_cell c 8 a 8)
(is_castle_cell c 8 b 8)
(is_castle_cell c 8 c 8)
(is_castle_cell c 8 d 8)
(is_castle_cell c 8 e 8)

; IS CASTLE MOVE
; True iff moving the piece from source to destination constitutes a castle
(is_castle_move wk e 1 c 1)
(is_castle_move wk e 1 g 1)
(is_castle_move bk e 8 c 8)
(is_castle_move bk e 8 g 8)

; BOARD TOPOLOGY
(next_rank 1 2)
(next_rank 2 3)
(next_rank 3 4)
(next_rank 4 5)
(next_rank 5 6)
(next_rank 6 7)
(next_rank 7 8)

(next_file a b)
(next_file b c)
(next_file c d)
(next_file d e)
(next_file e f)
(next_file f g)
(next_file g h)

; BOARD COORDINATES

(coordinate 1)
(coordinate 2)
(coordinate 3)
(coordinate 4)
(coordinate 5)
(coordinate 6)
(coordinate 7)
(coordinate 8)
(coordinate a)
(coordinate b)
(coordinate c)
(coordinate d)
(coordinate e)
(coordinate f)
(coordinate g)
(coordinate h)

; MOVE COUNT SUCCESSOR
(succ s1 s2)
(succ s2 s3)
(succ s3 s4)
(succ s4 s5)
(succ s5 s6)
(succ s6 s7)
(succ s7 s8)
(succ s8 s9)
(succ s9 s10)
(succ s10 s11)
(succ s11 s12)
(succ s12 s13)
(succ s13 s14)
(succ s14 s15)
(succ s15 s16)
(succ s16 s17)
(succ s17 s18)
(succ s18 s19)
(succ s19 s20)
(succ s20 s21)
(succ s21 s22)
(succ s22 s23)
(succ s23 s24)
(succ s24 s25)
(succ s25 s26)
(succ s26 s27)
(succ s27 s28)
(succ s28 s29)
(succ s29 s30)
(succ s30 s31)
(succ s31 s32)
(succ s32 s33)
(succ s33 s34)
(succ s34 s35)
(succ s35 s36)
(succ s36 s37)
(succ s37 s38)
(succ s38 s39)
(succ s39 s40)
(succ s40 s41)
(succ s41 s42)
(succ s42 s43)
(succ s43 s44)
(succ s44 s45)
(succ s45 s46)
(succ s46 s47)
(succ s47 s48)
(succ s48 s49)
(succ s49 s50)
(succ s50 s51)
(succ s51 s52)
(succ s52 s53)
(succ s53 s54)
(succ s54 s55)
(succ s55 s56)
(succ s56 s57)
(succ s57 s58)
(succ s58 s59)
(succ s59 s60)
(succ s60 s61)
(succ s61 s62)
(succ s62 s63)
(succ s63 s64)
(succ s64 s65)
(succ s65 s66)
(succ s66 s67)
(succ s67 s68)
(succ s68 s69)
(succ s69 s70)
(succ s70 s71)
(succ s71 s72)
(succ s72 s73)
(succ s73 s74)
(succ s74 s75)
(succ s75 s76)
(succ s76 s77)
(succ s77 s78)
(succ s78 s79)
(succ s79 s80)
(succ s80 s81)
(succ s81 s82)
(succ s82 s83)
(succ s83 s84)
(succ s84 s85)
(succ s85 s86)
(succ s86 s87)
(succ s87 s88)
(succ s88 s89)
(succ s89 s90)
(succ s90 s91)
(succ s91 s92)
(succ s92 s93)
(succ s93 s94)
(succ s94 s95)
(succ s95 s96)
(succ s96 s97)
(succ s97 s98)
(succ s98 s99)
(succ s99 s100)
(succ s100 s101)
(succ s101 s102)
(succ s102 s103)
(succ s103 s104)
(succ s104 s105)
(succ s105 s106)
(succ s106 s107)
(succ s107 s108)
(succ s108 s109)
(succ s109 s110)
(succ s110 s111)
(succ s111 s112)
(succ s112 s113)
(succ s113 s114)
(succ s114 s115)
(succ s115 s116)
(succ s116 s117)
(succ s117 s118)
(succ s118 s119)
(succ s119 s120)
(succ s120 s121)
(succ s121 s122)
(succ s122 s123)
(succ s123 s124)
(succ s124 s125)
(succ s125 s126)
(succ s126 s127)
(succ s127 s128)
(succ s128 s129)
(succ s129 s130)
(succ s130 s131)
(succ s131 s132)
(succ s132 s133)
(succ s133 s134)
(succ s134 s135)
(succ s135 s136)
(succ s136 s137)
(succ s137 s138)
(succ s138 s139)
(succ s139 s140)
(succ s140 s141)
(succ s141 s142)
(succ s142 s143)
(succ s143 s144)
(succ s144 s145)
(succ s145 s146)
(succ s146 s147)
(succ s147 s148)
(succ s148 s149)
(succ s149 s150)
(succ s150 s151)
(succ s151 s152)
(succ s152 s153)
(succ s153 s154)
(succ s154 s155)
(succ s155 s156)
(succ s156 s157)
(succ s157 s158)
(succ s158 s159)
(succ s159 s160)
(succ s160 s161)
(succ s161 s162)
(succ s162 s163)
(succ s163 s164)
(succ s164 s165)
(succ s165 s166)
(succ s166 s167)
(succ s167 s168)
(succ s168 s169)
(succ s169 s170)
(succ s170 s171)
(succ s171 s172)
(succ s172 s173)
(succ s173 s174)
(succ s174 s175)
(succ s175 s176)
(succ s176 s177)
(succ s177 s178)
(succ s178 s179)
(succ s179 s180)
(succ s180 s181)
(succ s181 s182)
(succ s182 s183)
(succ s183 s184)
(succ s184 s185)
(succ s185 s186)
(succ s186 s187)
(succ s187 s188)
(succ s188 s189)
(succ s189 s190)
(succ s190 s191)
(succ s191 s192)
(succ s192 s193)
(succ s193 s194)
(succ s194 s195)
(succ s195 s196)
(succ s196 s197)
(succ s197 s198)
(succ s198 s199)
(succ s199 s200)
(succ s200 s201)

; END of chess.kif
