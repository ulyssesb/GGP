;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Amazing Blocks World
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (role robot)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (init (cell a))
  (init (gold c))

  (init (step c1))

  (init (clear b))
  (init (clear c))
  (init (clear f))
  
  (init (on c a))
  (init (on e d))
  (init (on f e))

  (init (table a))
  (init (table b))
  (init (table d))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (next (cell ?y))
      (does robot move)
      (true (cell ?x))
      (adjacent ?x ?y))

  (<= (next (cell ?x))
      (does robot grab)
      (true (cell ?x)))

  (<= (next (cell ?x))
      (does robot drop)
      (true (cell ?x)))

  (<= (next (cell ?x))
      (true (cell ?x))
      (does robot (s ?u ?v)))

  (<= (next (cell ?x))
      (true (cell ?x))
      (does robot (u ?u ?v)))

  (<= (next (cell ?x))
      (true (cell ?x))
      (does robot (contemplate ?u ?v)))

  (<= (next (gold ?x))
      (does robot move)
      (true (gold ?x)))

  (<= (next (gold i))
      (does robot grab)
      (true (cell ?x))
      (true (gold ?x)))

  (<= (next (gold i))
      (does robot grab)
      (true (gold i)))

  (<= (next (gold ?y))
      (does robot grab)
      (true (cell ?x))
      (true (gold ?y))
      (distinct ?x ?y))

  (<= (next (gold ?x))
      (does robot drop)
      (true (cell ?x))
      (true (gold i)))

  (<= (next (gold ?x))
      (does robot drop)
      (true (gold ?x))
      (distinct ?x i))

  (<= (next (gold ?x))
      (true (gold ?x))
      (does robot (s ?u ?v)))

  (<= (next (gold ?x))
      (true (gold ?x))
      (does robot (u ?u ?v)))

  (<= (next (gold ?x))
      (true (gold ?x))
      (does robot (contemplate ?u ?v)))

  (<= (next (step ?y))
      (true (step ?x))
      (succ ?x ?y))

  (<= (next (on ?x ?y))
      (does robot (s ?x ?y)))

  (<= (next (on ?x ?y))
      (does robot (s ?u ?v))
      (true (on ?x ?y)))

  (<= (next (on ?x ?y))
      (does robot (u ?u ?v))
      (true (on ?x ?y))
      (distinct ?u ?x))

  (<= (next (on ?x ?y))
      (true (on ?x ?y))
      (does robot move))

  (<= (next (on ?x ?y))
      (true (on ?x ?y))
      (does robot grab))

  (<= (next (on ?x ?y))
      (true (on ?x ?y))
      (does robot drop))

  (<= (next (on ?x ?y))
      (true (on ?x ?y))
      (does robot (contemplate ?u ?v)))

  (<= (next (table ?x))
      (does robot (s ?u ?v))
      (true (table ?x))
      (distinct ?u ?x))

  (<= (next (table ?x))
      (does robot (u ?x ?y)))

  (<= (next (table ?x))
      (does robot (u ?u ?v))
      (true (table ?x)))

  (<= (next (table ?x))
      (true (table ?x))
      (does robot move))

  (<= (next (table ?x))
      (true (table ?x))
      (does robot grab))

  (<= (next (table ?x))
      (true (table ?x))
      (does robot drop))

  (<= (next (table ?x))
      (true (table ?x))
      (does robot (contemplate ?u ?v)))

  (<= (next (clear ?y))
      (does robot (s ?u ?v))
      (true (clear ?y))
      (distinct ?v ?y))

  (<= (next (clear ?y))
      (does robot (u ?x ?y)))

  (<= (next (clear ?x))
      (does robot (u ?u ?v))
      (true (clear ?x)))

  (<= (next (clear ?x))
      (true (clear ?x))
      (does robot move))

  (<= (next (clear ?x))
      (true (clear ?x))
      (does robot grab))

  (<= (next (clear ?x))
      (true (clear ?x))
      (does robot drop))

  (<= (next (clear ?x))
      (true (clear ?x))
      (does robot (contemplate ?u ?v)))

  (<= (next (pondered ?u ?v))
      (does robot (contemplate ?u ?v)))

  (<= (next (step ?y))
      (true (step ?x))
      (succ ?x ?y))

  (adjacent a b)
  (adjacent b c)
  (adjacent c d)
  (adjacent d a)

  (succ c1 c2)
  (succ c2 c3)
  (succ c3 c4)
  (succ c4 c5)
  (succ c5 c6)
  (succ c6 c7)
  (succ c7 c8)
  (succ c8 c9)
  (succ c9 c10)
  (succ c10 c11)
  (succ c11 c12)
  (succ c12 c13)
  (succ c13 c14)
  (succ c14 c15)
  (succ c15 c16)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (legal robot move))

  (<= (legal robot grab)
      (true (cell ?x))
      (true (gold ?x)))

  (<= (legal robot drop)
      (true (gold i)))

  (<= (legal robot (s ?x ?y))
      (true (clear ?x))
      (true (table ?x))
      (true (clear ?y))
      (distinct ?x ?y))

  (<= (legal robot (u ?x ?y))
      (true (clear ?x))
      (true (on ?x ?y)))

  (<= (legal robot (contemplate ?x ?y))
      (adjacent ?x ?x1)
      (adjacent ?y ?y1))

;  (<= (legal robot (contemplate ?x ?y))
;      (adjacent ?x ?x1)
;      (succ ?y ?y1))

;  (<= (legal robot (contemplate ?x ?y))
;      (succ ?x ?x1)
;      (adjacent ?y ?y1))

;  (<= (legal robot (contemplate ?x ?y))
;      (succ ?x ?x1)
;      (succ ?y ?y1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (goal robot 100)
      (true (gold a))
      (true (on a e))
      (true (on c a))
      (true (on d f))
      (true (on b d)))

  (<= (goal robot 75)
      (true (on c a))
      (true (on d f))
      (true (on b d)))

  (<= (goal robot 70)
      (true (gold a)))

  (<= (goal robot 65)
      (true (on a b))
      (true (on b c)))

  (<= (goal robot 0)
      (true (step c15)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= terminal
      (true (step c15)))

  (<= terminal
      (true (gold a)))

  (<= terminal
      (true (on a b))
      (true (on b c)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
